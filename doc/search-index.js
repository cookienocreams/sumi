var searchIndex = JSON.parse('{\
"sumi":{"doc":"","t":"DDDDDDDMMMMMMMMMLLLLLLLLLLLLLLFFFFALLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLFFAMLLLLLLLLLLLLLLFLLLLLLLAMMAMFMMMMLMMAFAMAMMMAMLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLMLLLLLLLMFFFFGFFFFFFDLLFMFFFLLLLLFFLLLFMFFLLLLLLFFFFNNELLFLLLLLLLLLFFLLLFLFLLLLLLLLFFFFFFFF","n":["BASE_CAPTURE_REGEX","Config","DUAL_INDEX_REGEX","NUM_CAPTURE_REGEX","READ_NAME_UMI_REGEX","SINGLE_INDEX_REGEX","UMI_REGEX_QIAGEN","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","adapter","adapter_mismatch","alignment_reference","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_maximum_length","calculate_minimum_length","capture_files_to_delete","capture_target_files","common","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","extract_umis","fmt","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get_read_counts","get_umi_length","graph","include_unaligned_reads","init","init","init","init","init","init","init","into","into","into","into","into","into","into","is_gzipped","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","isomirs","isomirs","keep_intermediate_files","lengths","levenshtein_distance","main","max_isomir_diff","maximum_length","minimum_length","mismatch","new","num_threads","qiagen","quality","remove_intermediate_files","rna_counts","rng_seed","sample","subsample_fastqs","subsample_to_lowest","three_p","thresholds","thresholds","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","trim_adapters","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","umi_regex","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_metrics","find_common_rnas","write_common_rna_file","extract_umis","regex_extraction","UmiGraph","build_substring_index","deduplicate_bam","find_true_isomir_umis","find_true_umis","get_representative_umis_bfs","umi_graph","MiRNA","borrow","borrow_mut","calculate_read_counts","canonical_sequence","construct_isomir_name","create_isomirs","create_rna_hashmap_from_fasta","deref","deref_mut","drop","from","from_subset","get_initial_seed","get_isomir_name","init","into","is_in_subset","isomir_analysis","mirna_name","seed_and_extend","sequences_with_hamming_distance_of_1","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","calculate_read_length_distribution","average_read_quality","get_q_score_probability","mean","Fastq","Io","MyError","borrow","borrow_mut","bowtie2_analysis","deref","deref_mut","drop","fmt","fmt","from","from","from","from_subset","generate_rna_counts","get_percent_alignment","init","into","is_in_subset","is_sam_file_empty","provide","rna_discovery_calculation","source","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","count_reads","find_fastq_with_fewest_reads","subsample_fastqs","subsample_file","write_to_output","combine_threshold_counts","threshold_count","trim_adapters"],"q":[[0,"sumi"],[172,"sumi::common"],[174,"sumi::extract_umis"],[176,"sumi::graph"],[183,"sumi::isomirs"],[211,"sumi::lengths"],[212,"sumi::quality"],[215,"sumi::rna_counts"],[246,"sumi::sample"],[251,"sumi::thresholds"],[253,"sumi::trim_adapters"]],"d":["","The <code>Config</code> struct is used to store the configuration …","","","","Define the regex to extract index information and UMI and …","","","","","","","","","","","","","","","","","","","","","","","","","Calculates the maximum length to allow post adapter …","Calculates the minimum length to allow post adapter …","Gather intermediate files for deletion.","List all files in the current directory that contain the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Find how many reads are in each fastq file.","Extracts the length of the UMI (Unique Molecular …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if a file is gzipped by reading the first two bytes …","","","","","","","","","","","","","","","","","","Constructs a new <code>Config</code> instance from the command-line …","","","","Remove all intermediate files.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Function to find RNAs that are common in all given …","Function to write RNAs common to all samples to two output …","Extract Unique Molecular Identifiers (UMIs) from a given …","Extract Unique Molecular Identifiers (UMIs) from a given …","","Construct a substring index from a slice of UMIs.","Deduplicate a BAM file using a set of unique molecular …","Find the representative UMIs from miRNA or isomiR HashMap …","Process a BAM file and error correct UMIs","Find representative UMIs from a UMI graph.","Create a graph from a dictionary of UMIs and their counts.","","","","Count the occurrence of each isomiR and miRNA based on …","","Construct the name of an isomiR based on the given base …","Generate a set of potential isomiRs derived from a given …","Create a <code>HashMap</code> representation of an RNA sequence …","","","","Returns the argument unchanged.","","Return a seed of specified length from the center of the …","Retrieve the name of an isomiR based on the provided miRNA …","","Calls <code>U::from(self)</code>.","","Analyze a given fastq file to count canonical miRNA and …","","Use a seed and extend approach to find modifications on …","Generate all DNA sequences with a Hamming distance of 1 …","","","","","","","Calculates and outputs the distribution of read lengths in …","Calculate the average quality score of a FASTQ file","Get the total error probability from a record’s quality …","Calcualte the mean of an input vector","","","","","","Align sequences from a trimmed FASTQ file to a <code>bowtie2</code> …","","","","","","Returns the argument unchanged.","","","","This function counts the occurrence of each RNA in an …","Get the percentage of reads that aligned to the specified …","","Calls <code>U::from(self)</code>.","","Check a SAM file to determine if it contains alignment …","","Perform alignment of trimmed fastq files to the target RNA …","","","","","","","","","Count the number of reads in a FASTQ file.","Find the FASTQ file with the fewest reads from a list of …","Subsample multiple FASTQ files each to a target number of …","Subsamples a given FASTQ file to a target number of reads …","Writes selected reads to an output FASTQ file.","Combine multiple threshold counts files into a single CSV …","Process a list of CSV files containing RNA counts and …","Trim the 3’ adapter from each read."],"i":[0,0,0,0,0,0,0,7,9,10,11,12,13,14,14,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,0,0,0,0,7,7,9,9,10,10,11,11,12,12,13,13,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,0,0,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,7,9,10,11,12,13,14,0,14,14,0,14,0,14,14,14,14,14,14,14,0,0,0,14,0,14,14,14,0,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,7,9,10,11,12,13,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,14,7,9,10,11,12,13,14,14,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,45,0,0,0,45,45,45,45,45,0,0,45,45,45,0,45,0,0,45,45,45,45,45,45,0,0,0,0,42,42,0,42,42,0,42,42,42,42,42,42,42,42,42,0,0,42,42,42,0,42,0,42,42,42,42,42,42,42,42,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,3],2],[[1,2,3],2],[1,[[5,[4]]]],[[1,3],[[5,[4]]]],0,[6],[7,8],[6],[9,8],[10,8],[6],[6],[11,8],[6],[12,8],[6],[13,8],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],0,[[14,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[4]],[5,[4]]],[[21,[[18,[4,17]],[20,[19]]]]]],[1,2],0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[22,[3]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,0,0,0,[[],22],0,0,0,0,[23,14],0,0,0,[[]],0,0,0,0,0,0,0,0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[5,[4]],[5,[4]],6,6]],[[[5,[4]],[5,[[18,[4,26]]]],[5,[[18,[4,27]]]],[5,[4]],1]],[[1,1,1,8,4,3,3,3],[[21,[[20,[19]]]]]],[[4,28,1,[30,[29]],8,3,3,6,3]],0,[[[31,[[5,[2]]]],6],[[18,[[5,[2]],[32,[6]]]]]],[[1,4,[32,[[5,[2]]]]],[[21,[[20,[19]]]]]],[[[18,[[5,[2]],33]],3],[[21,[[32,[[5,[2]]]],34]]]],[[1,3],[[21,[[32,[[5,[2]]]],34]]]],[[[35,[[5,[2]],33]],[18,[36]]],[[32,[[5,[2]]]]]],[[[18,[[5,[2]],33]],33,3],37],0,[[]],[[]],[[[32,[[5,[2]]]],4,[18,[[5,[2]],4]],[18,[4,[0,[38,39,40]]]],3],[[21,[[18,[4,17]],[20,[19]]]]]],0,[[1,[18,[4,4]]],[[24,[4]]]],[[4,6,6],[[32,[4]]]],[[1,14],[[21,[[20,[19]]]]]],[6],[6],[6],[[]],[[]],[[1,6],1],[[4,4,4,6],4],[[],6],[[]],[[],3],[[4,4,14,[18,[4,4]],[18,[4,4]],6],[[21,[[20,[19]]]]]],0,[[1,1,6,[18,[4,4]]]],[1,[[5,[4]]]],[[],24],[[]],[[],21],[[],21],[[],25],[[]],[[[5,[4]]]],[1,[[21,[41,[20,[19]]]]]],[[[31,[2]]],41],[[[5,[41]]],41],0,0,0,[[]],[[]],[[4,4,14,1,1],[[21,[[20,[19]]]]]],[6],[6],[6],[[42,15],16],[[42,15],16],[[]],[43,42],[34,42],[[]],[[1,4,1],[[21,[[18,[4,4]],[20,[19]]]]]],[[4,2,1,17],[[21,[27,[20,[19]]]]]],[[],6],[[]],[[],3],[1,[[21,[34]]]],[44],[[[5,[4]],[5,[4]],14],[[21,[[5,[4]],34]]]],[42,[[24,[19]]]],[[],4],[[],24],[[]],[[],21],[[],21],[[],25],[[]],[1,[[21,[17,[20,[19]]]]]],[[[31,[4]],[18,[4,6]]],[[21,[[20,[19]]]]]],[[[5,[4]],[5,[4]],[24,[33]],[24,[17]]],[[21,[[20,[19]]]]]],[[1,33,[24,[17]]],[[21,[[5,[[5,[4]]]],[20,[19]]]]]],[[1,[5,[[5,[4]]]]],[[21,[[20,[19]]]]]],[[[5,[4]],4,[5,[4]]],[[21,[[20,[19]]]]]],[[[5,[4]],[5,[6]],[5,[4]],1],[[21,[[20,[19]]]]]],[[[5,[4]],[18,[4,4]],2,2,8,4,3,3,3],[[5,[4]]]]],"c":[],"p":[[15,"str"],[15,"u8"],[15,"bool"],[3,"String"],[3,"Vec"],[15,"usize"],[3,"SINGLE_INDEX_REGEX"],[3,"Regex"],[3,"DUAL_INDEX_REGEX"],[3,"READ_NAME_UMI_REGEX"],[3,"UMI_REGEX_QIAGEN"],[3,"NUM_CAPTURE_REGEX"],[3,"BASE_CAPTURE_REGEX"],[3,"Config"],[3,"Formatter"],[6,"Result"],[15,"u64"],[3,"HashMap"],[8,"Error"],[3,"Box"],[4,"Result"],[6,"Result"],[3,"ArgMatches"],[4,"Option"],[3,"TypeId"],[15,"i32"],[15,"f64"],[3,"Record"],[3,"File"],[3,"Writer"],[15,"slice"],[3,"HashSet"],[15,"u32"],[3,"Error"],[3,"Graph"],[3,"NodeIndex"],[6,"UmiGraph"],[8,"Eq"],[8,"Hash"],[8,"Display"],[15,"f32"],[4,"MyError"],[4,"Error"],[3,"Demand"],[3,"MiRNA"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
