var searchIndex = JSON.parse('{\
"sumi":{"doc":"","t":"DDDDDDDMMMMMMMLLLLLLLLLLLLLLFFALLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLFAMLLLLLLLLLLLLLLFLLLLLLLMAMFMLMMAFAMAMMAMLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLMLLLLLLLMFFFFGFFFFFFFFFNNELLLLLLLLLLLFFLLLFLFLLLLLLLLFFFFFFFF","n":["BASE_CAPTURE_REGEX","Config","DUAL_INDEX_REGEX","NUM_CAPTURE_REGEX","READ_NAME_UMI_REGEX","SINGLE_INDEX_REGEX","UMI_REGEX_QIAGEN","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","alignment_reference","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_minimum_length","capture_target_files","common","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","extract_umis","fmt","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get_read_counts","graph","include_unaligned_reads","init","init","init","init","init","init","init","into","into","into","into","into","into","into","is_gzipped","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","keep_intermediate_files","lengths","levenshtein_distance","main","minimum_length","new","num_threads","qiagen","quality","remove_intermediate_files","rna_counts","rng_seed","sample","subsample_fastqs","subsample_to_lowest","thresholds","thresholds","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","trim_adapters","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","umi_regex","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_metrics","find_common_rnas","write_common_rna_file","extract_umis","extract_umis_qiagen","UmiGraph","build_substring_index","deduplicate_bam","find_true_umis","get_representative_umis_bfs","umi_graph","calculate_read_length_distribution","average_read_quality","get_q_score_probability","mean","Fastq","Io","MyError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from_subset","generate_rna_counts","get_percent_alignment","init","into","is_in_subset","is_sam_file_empty","provide","rna_discovery_calculation","source","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","count_reads","find_fastq_with_fewest_reads","subsample_fastqs","subsample_file","write_to_output","combine_threshold_counts","threshold_count","trim_adapters"],"q":[[0,"sumi"],[161,"sumi::common"],[163,"sumi::extract_umis"],[165,"sumi::graph"],[171,"sumi::lengths"],[172,"sumi::quality"],[175,"sumi::rna_counts"],[205,"sumi::sample"],[210,"sumi::thresholds"],[212,"sumi::trim_adapters"]],"d":["","The <code>Config</code> struct is used to store the configuration …","","","","Define the regex to extract index information and UMI and …","","","","","","","","","","","","","","","","","","","","","","","Calculates the minimum length to allow post adapter …","List all files in the current directory that contain the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Find how many reads are in each fastq file.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if a file is gzipped by reading the first two bytes …","","","","","","","","","","","","","Constructs a new <code>Config</code> instance from the command-line …","","","","Remove all intermediate files.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Function to find RNAs that are common in all given …","Function to write RNAs common to all samples to two output …","Extracts Unique Molecular Identifiers (UMIs) from a given …","Extracts Unique Molecular Identifiers (UMIs) from a given …","","Construct a substring index from a slice of UMIs.","Deduplicate a BAM file using a set of unique molecular …","Process a BAM file and error correct UMIs","Find representative UMIs from a UMI graph.","Create a graph from a dictionary of UMIs and their counts.","Calculates and outputs the distribution of read lengths in …","Calculate the average quality score of a FASTQ file","Get the total error probability from a record’s quality …","Calcualte the mean of an input vector","","","","","","","","","","","","","Returns the argument unchanged.","","This function counts the occurrence of each RNA in an …","Get the percentage of reads that aligned to the specified …","","Calls <code>U::from(self)</code>.","","Checks a SAM file to determine if it contains alignment …","","Perform alignment of trimmed fastq files to the target RNA …","","","","","","","","","Count the number of reads in a FASTQ file.","Find the FASTQ file with the fewest reads from a list of …","Subsample multiple FASTQ files each to a target number of …","Subsamples a given FASTQ file to a target number of reads …","Writes selected reads to an output FASTQ file.","Combine multiple threshold counts files into a single CSV …","Process a list of CSV files containing RNA counts and …","Trim the 3’ adapter from each read."],"i":[0,0,0,0,0,0,0,7,9,10,11,12,13,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,0,0,7,7,9,9,10,10,11,11,12,12,13,13,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,0,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,7,9,10,11,12,13,14,14,0,14,0,14,14,14,14,0,0,0,14,0,14,14,0,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,0,7,9,10,11,12,13,14,7,9,10,11,12,13,14,7,9,10,11,12,13,14,14,7,9,10,11,12,13,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,35,0,35,35,35,35,35,35,35,35,35,35,35,0,0,35,35,35,0,35,0,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,3],2],[1,[[5,[4]]]],0,[6],[7,8],[6],[9,8],[6],[10,8],[6],[11,8],[6],[12,8],[6],[13,8],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],0,[[14,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[4]],[5,[4]]],[[21,[[18,[4,17]],[20,[19]]]]]],0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[22,[3]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,0,[[],22],0,[23,14],0,0,0,[[]],0,0,0,0,0,0,0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[5,[4]],[5,[4]]]],[[[5,[4]],[5,[[18,[4,26]]]],[5,[[18,[4,27]]]],[5,[4]],1]],[[1,1,8],[[21,[[20,[19]]]]]],[[1,1,1],22],0,[[[28,[[5,[2]]]],6],[[18,[[5,[2]],[29,[6]]]]]],[[1,4,[29,[[5,[2]]]]],[[21,[[20,[19]]]]]],[[1,3],[[21,[[29,[[5,[2]]]],30]]]],[[[32,[[5,[2]],31]],[18,[33]]],[[29,[[5,[2]]]]]],[[[18,[[5,[2]],31]],31,3]],[[[5,[4]]]],[1,[[21,[34,[20,[19]]]]]],[[[28,[2]]],34],[[[5,[34]]],34],0,0,0,[[]],[[]],[6],[6],[6],[[35,15],16],[[35,15],16],[36,35],[30,35],[[]],[[]],[[1,4,1],[[21,[[20,[19]]]]]],[[4,2,1,17],[[21,[27,[20,[19]]]]]],[[],6],[[]],[[],3],[1,[[21,[30]]]],[37],[[[5,[4]],[5,[4]],14],[[21,[[5,[4]],30]]]],[35,[[24,[19]]]],[[],4],[[],24],[[]],[[],21],[[],21],[[],25],[[]],[1,[[21,[17,[20,[19]]]]]],[[[28,[4]],[18,[4,6]]],[[21,[[20,[19]]]]]],[[[5,[4]],[5,[4]],[24,[31]],[24,[17]]],[[21,[[20,[19]]]]]],[[1,31,[24,[17]]],[[21,[[5,[[5,[4]]]],[20,[19]]]]]],[[1,[5,[[5,[4]]]]],[[21,[[20,[19]]]]]],[[[5,[4]],4,[5,[4]]],[[21,[[20,[19]]]]]],[[[5,[4]],[5,[6]],[5,[4]],1],[[21,[[20,[19]]]]]],[[[5,[4]],[18,[4,4]],2,8],[[5,[4]]]]],"c":[],"p":[[15,"str"],[15,"u8"],[15,"bool"],[3,"String"],[3,"Vec"],[15,"usize"],[3,"SINGLE_INDEX_REGEX"],[3,"Regex"],[3,"DUAL_INDEX_REGEX"],[3,"READ_NAME_UMI_REGEX"],[3,"UMI_REGEX_QIAGEN"],[3,"NUM_CAPTURE_REGEX"],[3,"BASE_CAPTURE_REGEX"],[3,"Config"],[3,"Formatter"],[6,"Result"],[15,"u64"],[3,"HashMap"],[8,"Error"],[3,"Box"],[4,"Result"],[6,"Result"],[3,"ArgMatches"],[4,"Option"],[3,"TypeId"],[15,"i32"],[15,"f64"],[15,"slice"],[3,"HashSet"],[3,"Error"],[15,"u32"],[3,"Graph"],[3,"NodeIndex"],[15,"f32"],[4,"MyError"],[4,"Error"],[3,"Demand"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
